// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: staff_tarif.proto

package staff_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StaffTarifServiceClient is the client API for StaffTarifService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffTarifServiceClient interface {
	Create(ctx context.Context, in *CreateStaffTarifRequest, opts ...grpc.CallOption) (*IdResponse, error)
	Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetStaffTarifResponse, error)
	GetAll(ctx context.Context, in *GetAllStaffTarifRequest, opts ...grpc.CallOption) (*GetAllStaffTarifResponse, error)
	Update(ctx context.Context, in *UpdateStaffTarifRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
}

type staffTarifServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffTarifServiceClient(cc grpc.ClientConnInterface) StaffTarifServiceClient {
	return &staffTarifServiceClient{cc}
}

func (c *staffTarifServiceClient) Create(ctx context.Context, in *CreateStaffTarifRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/staff_service.StaffTarifService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffTarifServiceClient) Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetStaffTarifResponse, error) {
	out := new(GetStaffTarifResponse)
	err := c.cc.Invoke(ctx, "/staff_service.StaffTarifService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffTarifServiceClient) GetAll(ctx context.Context, in *GetAllStaffTarifRequest, opts ...grpc.CallOption) (*GetAllStaffTarifResponse, error) {
	out := new(GetAllStaffTarifResponse)
	err := c.cc.Invoke(ctx, "/staff_service.StaffTarifService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffTarifServiceClient) Update(ctx context.Context, in *UpdateStaffTarifRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/staff_service.StaffTarifService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffTarifServiceClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/staff_service.StaffTarifService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffTarifServiceServer is the server API for StaffTarifService service.
// All implementations must embed UnimplementedStaffTarifServiceServer
// for forward compatibility
type StaffTarifServiceServer interface {
	Create(context.Context, *CreateStaffTarifRequest) (*IdResponse, error)
	Get(context.Context, *IdRequest) (*GetStaffTarifResponse, error)
	GetAll(context.Context, *GetAllStaffTarifRequest) (*GetAllStaffTarifResponse, error)
	Update(context.Context, *UpdateStaffTarifRequest) (*Response, error)
	Delete(context.Context, *IdRequest) (*Response, error)
	mustEmbedUnimplementedStaffTarifServiceServer()
}

// UnimplementedStaffTarifServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStaffTarifServiceServer struct {
}

func (UnimplementedStaffTarifServiceServer) Create(context.Context, *CreateStaffTarifRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStaffTarifServiceServer) Get(context.Context, *IdRequest) (*GetStaffTarifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStaffTarifServiceServer) GetAll(context.Context, *GetAllStaffTarifRequest) (*GetAllStaffTarifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedStaffTarifServiceServer) Update(context.Context, *UpdateStaffTarifRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStaffTarifServiceServer) Delete(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStaffTarifServiceServer) mustEmbedUnimplementedStaffTarifServiceServer() {}

// UnsafeStaffTarifServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffTarifServiceServer will
// result in compilation errors.
type UnsafeStaffTarifServiceServer interface {
	mustEmbedUnimplementedStaffTarifServiceServer()
}

func RegisterStaffTarifServiceServer(s grpc.ServiceRegistrar, srv StaffTarifServiceServer) {
	s.RegisterService(&StaffTarifService_ServiceDesc, srv)
}

func _StaffTarifService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaffTarifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffTarifServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffTarifService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffTarifServiceServer).Create(ctx, req.(*CreateStaffTarifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffTarifService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffTarifServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffTarifService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffTarifServiceServer).Get(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffTarifService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStaffTarifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffTarifServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffTarifService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffTarifServiceServer).GetAll(ctx, req.(*GetAllStaffTarifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffTarifService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffTarifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffTarifServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffTarifService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffTarifServiceServer).Update(ctx, req.(*UpdateStaffTarifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffTarifService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffTarifServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffTarifService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffTarifServiceServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StaffTarifService_ServiceDesc is the grpc.ServiceDesc for StaffTarifService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaffTarifService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "staff_service.StaffTarifService",
	HandlerType: (*StaffTarifServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StaffTarifService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StaffTarifService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _StaffTarifService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StaffTarifService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StaffTarifService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staff_tarif.proto",
}
